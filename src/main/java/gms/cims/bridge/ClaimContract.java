/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package gms.cims.bridge;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ClaimContract extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2790854983507028128L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClaimContract\",\"namespace\":\"gms.cims.bridge\",\"fields\":[{\"name\":\"CL_ClaimID\",\"type\":[\"int\",\"null\"],\"default\":-1},{\"name\":\"CC_Relationship\",\"type\":[\"int\",\"null\"],\"default\":-1},{\"name\":\"CO_ContractID\",\"type\":[\"int\",\"null\"],\"default\":-1},{\"name\":\"CS_Description\",\"type\":[\"string\",\"null\"],\"default\":\"NONE\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ClaimContract> ENCODER =
      new BinaryMessageEncoder<ClaimContract>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ClaimContract> DECODER =
      new BinaryMessageDecoder<ClaimContract>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ClaimContract> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ClaimContract> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ClaimContract>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ClaimContract to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ClaimContract from a ByteBuffer. */
  public static ClaimContract fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.Integer CL_ClaimID;
  @Deprecated public java.lang.Integer CC_Relationship;
  @Deprecated public java.lang.Integer CO_ContractID;
  @Deprecated public java.lang.CharSequence CS_Description;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ClaimContract() {}

  /**
   * All-args constructor.
   * @param CL_ClaimID The new value for CL_ClaimID
   * @param CC_Relationship The new value for CC_Relationship
   * @param CO_ContractID The new value for CO_ContractID
   * @param CS_Description The new value for CS_Description
   */
  public ClaimContract(java.lang.Integer CL_ClaimID, java.lang.Integer CC_Relationship, java.lang.Integer CO_ContractID, java.lang.CharSequence CS_Description) {
    this.CL_ClaimID = CL_ClaimID;
    this.CC_Relationship = CC_Relationship;
    this.CO_ContractID = CO_ContractID;
    this.CS_Description = CS_Description;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return CL_ClaimID;
    case 1: return CC_Relationship;
    case 2: return CO_ContractID;
    case 3: return CS_Description;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: CL_ClaimID = (java.lang.Integer)value$; break;
    case 1: CC_Relationship = (java.lang.Integer)value$; break;
    case 2: CO_ContractID = (java.lang.Integer)value$; break;
    case 3: CS_Description = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'CL_ClaimID' field.
   * @return The value of the 'CL_ClaimID' field.
   */
  public java.lang.Integer getCLClaimID() {
    return CL_ClaimID;
  }

  /**
   * Sets the value of the 'CL_ClaimID' field.
   * @param value the value to set.
   */
  public void setCLClaimID(java.lang.Integer value) {
    this.CL_ClaimID = value;
  }

  /**
   * Gets the value of the 'CC_Relationship' field.
   * @return The value of the 'CC_Relationship' field.
   */
  public java.lang.Integer getCCRelationship() {
    return CC_Relationship;
  }

  /**
   * Sets the value of the 'CC_Relationship' field.
   * @param value the value to set.
   */
  public void setCCRelationship(java.lang.Integer value) {
    this.CC_Relationship = value;
  }

  /**
   * Gets the value of the 'CO_ContractID' field.
   * @return The value of the 'CO_ContractID' field.
   */
  public java.lang.Integer getCOContractID() {
    return CO_ContractID;
  }

  /**
   * Sets the value of the 'CO_ContractID' field.
   * @param value the value to set.
   */
  public void setCOContractID(java.lang.Integer value) {
    this.CO_ContractID = value;
  }

  /**
   * Gets the value of the 'CS_Description' field.
   * @return The value of the 'CS_Description' field.
   */
  public java.lang.CharSequence getCSDescription() {
    return CS_Description;
  }

  /**
   * Sets the value of the 'CS_Description' field.
   * @param value the value to set.
   */
  public void setCSDescription(java.lang.CharSequence value) {
    this.CS_Description = value;
  }

  /**
   * Creates a new ClaimContract RecordBuilder.
   * @return A new ClaimContract RecordBuilder
   */
  public static gms.cims.bridge.ClaimContract.Builder newBuilder() {
    return new gms.cims.bridge.ClaimContract.Builder();
  }

  /**
   * Creates a new ClaimContract RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ClaimContract RecordBuilder
   */
  public static gms.cims.bridge.ClaimContract.Builder newBuilder(gms.cims.bridge.ClaimContract.Builder other) {
    return new gms.cims.bridge.ClaimContract.Builder(other);
  }

  /**
   * Creates a new ClaimContract RecordBuilder by copying an existing ClaimContract instance.
   * @param other The existing instance to copy.
   * @return A new ClaimContract RecordBuilder
   */
  public static gms.cims.bridge.ClaimContract.Builder newBuilder(gms.cims.bridge.ClaimContract other) {
    return new gms.cims.bridge.ClaimContract.Builder(other);
  }

  /**
   * RecordBuilder for ClaimContract instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClaimContract>
    implements org.apache.avro.data.RecordBuilder<ClaimContract> {

    private java.lang.Integer CL_ClaimID;
    private java.lang.Integer CC_Relationship;
    private java.lang.Integer CO_ContractID;
    private java.lang.CharSequence CS_Description;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(gms.cims.bridge.ClaimContract.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.CL_ClaimID)) {
        this.CL_ClaimID = data().deepCopy(fields()[0].schema(), other.CL_ClaimID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CC_Relationship)) {
        this.CC_Relationship = data().deepCopy(fields()[1].schema(), other.CC_Relationship);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.CO_ContractID)) {
        this.CO_ContractID = data().deepCopy(fields()[2].schema(), other.CO_ContractID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.CS_Description)) {
        this.CS_Description = data().deepCopy(fields()[3].schema(), other.CS_Description);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ClaimContract instance
     * @param other The existing instance to copy.
     */
    private Builder(gms.cims.bridge.ClaimContract other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.CL_ClaimID)) {
        this.CL_ClaimID = data().deepCopy(fields()[0].schema(), other.CL_ClaimID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CC_Relationship)) {
        this.CC_Relationship = data().deepCopy(fields()[1].schema(), other.CC_Relationship);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.CO_ContractID)) {
        this.CO_ContractID = data().deepCopy(fields()[2].schema(), other.CO_ContractID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.CS_Description)) {
        this.CS_Description = data().deepCopy(fields()[3].schema(), other.CS_Description);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'CL_ClaimID' field.
      * @return The value.
      */
    public java.lang.Integer getCLClaimID() {
      return CL_ClaimID;
    }

    /**
      * Sets the value of the 'CL_ClaimID' field.
      * @param value The value of 'CL_ClaimID'.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimContract.Builder setCLClaimID(java.lang.Integer value) {
      validate(fields()[0], value);
      this.CL_ClaimID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'CL_ClaimID' field has been set.
      * @return True if the 'CL_ClaimID' field has been set, false otherwise.
      */
    public boolean hasCLClaimID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'CL_ClaimID' field.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimContract.Builder clearCLClaimID() {
      CL_ClaimID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'CC_Relationship' field.
      * @return The value.
      */
    public java.lang.Integer getCCRelationship() {
      return CC_Relationship;
    }

    /**
      * Sets the value of the 'CC_Relationship' field.
      * @param value The value of 'CC_Relationship'.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimContract.Builder setCCRelationship(java.lang.Integer value) {
      validate(fields()[1], value);
      this.CC_Relationship = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'CC_Relationship' field has been set.
      * @return True if the 'CC_Relationship' field has been set, false otherwise.
      */
    public boolean hasCCRelationship() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'CC_Relationship' field.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimContract.Builder clearCCRelationship() {
      CC_Relationship = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'CO_ContractID' field.
      * @return The value.
      */
    public java.lang.Integer getCOContractID() {
      return CO_ContractID;
    }

    /**
      * Sets the value of the 'CO_ContractID' field.
      * @param value The value of 'CO_ContractID'.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimContract.Builder setCOContractID(java.lang.Integer value) {
      validate(fields()[2], value);
      this.CO_ContractID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'CO_ContractID' field has been set.
      * @return True if the 'CO_ContractID' field has been set, false otherwise.
      */
    public boolean hasCOContractID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'CO_ContractID' field.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimContract.Builder clearCOContractID() {
      CO_ContractID = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'CS_Description' field.
      * @return The value.
      */
    public java.lang.CharSequence getCSDescription() {
      return CS_Description;
    }

    /**
      * Sets the value of the 'CS_Description' field.
      * @param value The value of 'CS_Description'.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimContract.Builder setCSDescription(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.CS_Description = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'CS_Description' field has been set.
      * @return True if the 'CS_Description' field has been set, false otherwise.
      */
    public boolean hasCSDescription() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'CS_Description' field.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimContract.Builder clearCSDescription() {
      CS_Description = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ClaimContract build() {
      try {
        ClaimContract record = new ClaimContract();
        record.CL_ClaimID = fieldSetFlags()[0] ? this.CL_ClaimID : (java.lang.Integer) defaultValue(fields()[0]);
        record.CC_Relationship = fieldSetFlags()[1] ? this.CC_Relationship : (java.lang.Integer) defaultValue(fields()[1]);
        record.CO_ContractID = fieldSetFlags()[2] ? this.CO_ContractID : (java.lang.Integer) defaultValue(fields()[2]);
        record.CS_Description = fieldSetFlags()[3] ? this.CS_Description : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ClaimContract>
    WRITER$ = (org.apache.avro.io.DatumWriter<ClaimContract>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ClaimContract>
    READER$ = (org.apache.avro.io.DatumReader<ClaimContract>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
