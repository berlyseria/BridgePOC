/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package gms.cims.bridge;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ClaimRefund extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5624734077148637512L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClaimRefund\",\"namespace\":\"gms.cims.bridge\",\"fields\":[{\"name\":\"RC_ClaimRefundID\",\"type\":[\"int\",\"null\"],\"default\":-1},{\"name\":\"CL_ClaimID\",\"type\":[\"int\",\"null\"],\"default\":-1},{\"name\":\"RC_SourceName\",\"type\":[\"string\",\"null\"],\"default\":\"NONE\"},{\"name\":\"RC_DateReceived\",\"type\":[\"string\",\"null\"],\"default\":\"NONE\"},{\"name\":\"RC_Amount\",\"type\":[\"int\",\"null\"],\"default\":-1},{\"name\":\"CR_CurrentTypeID\",\"type\":[\"int\",\"null\"],\"default\":-1},{\"name\":\"RC_ExchRate\",\"type\":[\"int\",\"null\"],\"default\":-1},{\"name\":\"RC_AmountCDN\",\"type\":[\"int\",\"null\"],\"default\":-1},{\"name\":\"RC_ChequeNo\",\"type\":[\"int\",\"null\"],\"default\":-1},{\"name\":\"RC_ChequeDate\",\"type\":[\"string\",\"null\"],\"default\":\"NONE\"},{\"name\":\"RE_ReasonID\",\"type\":[\"int\",\"null\"],\"default\":-1},{\"name\":\"PS_PaymentSourceID\",\"type\":[\"int\",\"null\"],\"default\":-1},{\"name\":\"ACT_AccountID\",\"type\":[\"int\",\"null\"],\"default\":-1},{\"name\":\"RE_Description\",\"type\":[\"int\",\"null\"],\"default\":-1}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ClaimRefund> ENCODER =
      new BinaryMessageEncoder<ClaimRefund>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ClaimRefund> DECODER =
      new BinaryMessageDecoder<ClaimRefund>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ClaimRefund> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ClaimRefund> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ClaimRefund>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ClaimRefund to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ClaimRefund from a ByteBuffer. */
  public static ClaimRefund fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.Integer RC_ClaimRefundID;
  @Deprecated public java.lang.Integer CL_ClaimID;
  @Deprecated public java.lang.CharSequence RC_SourceName;
  @Deprecated public java.lang.CharSequence RC_DateReceived;
  @Deprecated public java.lang.Integer RC_Amount;
  @Deprecated public java.lang.Integer CR_CurrentTypeID;
  @Deprecated public java.lang.Integer RC_ExchRate;
  @Deprecated public java.lang.Integer RC_AmountCDN;
  @Deprecated public java.lang.Integer RC_ChequeNo;
  @Deprecated public java.lang.CharSequence RC_ChequeDate;
  @Deprecated public java.lang.Integer RE_ReasonID;
  @Deprecated public java.lang.Integer PS_PaymentSourceID;
  @Deprecated public java.lang.Integer ACT_AccountID;
  @Deprecated public java.lang.Integer RE_Description;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ClaimRefund() {}

  /**
   * All-args constructor.
   * @param RC_ClaimRefundID The new value for RC_ClaimRefundID
   * @param CL_ClaimID The new value for CL_ClaimID
   * @param RC_SourceName The new value for RC_SourceName
   * @param RC_DateReceived The new value for RC_DateReceived
   * @param RC_Amount The new value for RC_Amount
   * @param CR_CurrentTypeID The new value for CR_CurrentTypeID
   * @param RC_ExchRate The new value for RC_ExchRate
   * @param RC_AmountCDN The new value for RC_AmountCDN
   * @param RC_ChequeNo The new value for RC_ChequeNo
   * @param RC_ChequeDate The new value for RC_ChequeDate
   * @param RE_ReasonID The new value for RE_ReasonID
   * @param PS_PaymentSourceID The new value for PS_PaymentSourceID
   * @param ACT_AccountID The new value for ACT_AccountID
   * @param RE_Description The new value for RE_Description
   */
  public ClaimRefund(java.lang.Integer RC_ClaimRefundID, java.lang.Integer CL_ClaimID, java.lang.CharSequence RC_SourceName, java.lang.CharSequence RC_DateReceived, java.lang.Integer RC_Amount, java.lang.Integer CR_CurrentTypeID, java.lang.Integer RC_ExchRate, java.lang.Integer RC_AmountCDN, java.lang.Integer RC_ChequeNo, java.lang.CharSequence RC_ChequeDate, java.lang.Integer RE_ReasonID, java.lang.Integer PS_PaymentSourceID, java.lang.Integer ACT_AccountID, java.lang.Integer RE_Description) {
    this.RC_ClaimRefundID = RC_ClaimRefundID;
    this.CL_ClaimID = CL_ClaimID;
    this.RC_SourceName = RC_SourceName;
    this.RC_DateReceived = RC_DateReceived;
    this.RC_Amount = RC_Amount;
    this.CR_CurrentTypeID = CR_CurrentTypeID;
    this.RC_ExchRate = RC_ExchRate;
    this.RC_AmountCDN = RC_AmountCDN;
    this.RC_ChequeNo = RC_ChequeNo;
    this.RC_ChequeDate = RC_ChequeDate;
    this.RE_ReasonID = RE_ReasonID;
    this.PS_PaymentSourceID = PS_PaymentSourceID;
    this.ACT_AccountID = ACT_AccountID;
    this.RE_Description = RE_Description;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return RC_ClaimRefundID;
    case 1: return CL_ClaimID;
    case 2: return RC_SourceName;
    case 3: return RC_DateReceived;
    case 4: return RC_Amount;
    case 5: return CR_CurrentTypeID;
    case 6: return RC_ExchRate;
    case 7: return RC_AmountCDN;
    case 8: return RC_ChequeNo;
    case 9: return RC_ChequeDate;
    case 10: return RE_ReasonID;
    case 11: return PS_PaymentSourceID;
    case 12: return ACT_AccountID;
    case 13: return RE_Description;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: RC_ClaimRefundID = (java.lang.Integer)value$; break;
    case 1: CL_ClaimID = (java.lang.Integer)value$; break;
    case 2: RC_SourceName = (java.lang.CharSequence)value$; break;
    case 3: RC_DateReceived = (java.lang.CharSequence)value$; break;
    case 4: RC_Amount = (java.lang.Integer)value$; break;
    case 5: CR_CurrentTypeID = (java.lang.Integer)value$; break;
    case 6: RC_ExchRate = (java.lang.Integer)value$; break;
    case 7: RC_AmountCDN = (java.lang.Integer)value$; break;
    case 8: RC_ChequeNo = (java.lang.Integer)value$; break;
    case 9: RC_ChequeDate = (java.lang.CharSequence)value$; break;
    case 10: RE_ReasonID = (java.lang.Integer)value$; break;
    case 11: PS_PaymentSourceID = (java.lang.Integer)value$; break;
    case 12: ACT_AccountID = (java.lang.Integer)value$; break;
    case 13: RE_Description = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'RC_ClaimRefundID' field.
   * @return The value of the 'RC_ClaimRefundID' field.
   */
  public java.lang.Integer getRCClaimRefundID() {
    return RC_ClaimRefundID;
  }

  /**
   * Sets the value of the 'RC_ClaimRefundID' field.
   * @param value the value to set.
   */
  public void setRCClaimRefundID(java.lang.Integer value) {
    this.RC_ClaimRefundID = value;
  }

  /**
   * Gets the value of the 'CL_ClaimID' field.
   * @return The value of the 'CL_ClaimID' field.
   */
  public java.lang.Integer getCLClaimID() {
    return CL_ClaimID;
  }

  /**
   * Sets the value of the 'CL_ClaimID' field.
   * @param value the value to set.
   */
  public void setCLClaimID(java.lang.Integer value) {
    this.CL_ClaimID = value;
  }

  /**
   * Gets the value of the 'RC_SourceName' field.
   * @return The value of the 'RC_SourceName' field.
   */
  public java.lang.CharSequence getRCSourceName() {
    return RC_SourceName;
  }

  /**
   * Sets the value of the 'RC_SourceName' field.
   * @param value the value to set.
   */
  public void setRCSourceName(java.lang.CharSequence value) {
    this.RC_SourceName = value;
  }

  /**
   * Gets the value of the 'RC_DateReceived' field.
   * @return The value of the 'RC_DateReceived' field.
   */
  public java.lang.CharSequence getRCDateReceived() {
    return RC_DateReceived;
  }

  /**
   * Sets the value of the 'RC_DateReceived' field.
   * @param value the value to set.
   */
  public void setRCDateReceived(java.lang.CharSequence value) {
    this.RC_DateReceived = value;
  }

  /**
   * Gets the value of the 'RC_Amount' field.
   * @return The value of the 'RC_Amount' field.
   */
  public java.lang.Integer getRCAmount() {
    return RC_Amount;
  }

  /**
   * Sets the value of the 'RC_Amount' field.
   * @param value the value to set.
   */
  public void setRCAmount(java.lang.Integer value) {
    this.RC_Amount = value;
  }

  /**
   * Gets the value of the 'CR_CurrentTypeID' field.
   * @return The value of the 'CR_CurrentTypeID' field.
   */
  public java.lang.Integer getCRCurrentTypeID() {
    return CR_CurrentTypeID;
  }

  /**
   * Sets the value of the 'CR_CurrentTypeID' field.
   * @param value the value to set.
   */
  public void setCRCurrentTypeID(java.lang.Integer value) {
    this.CR_CurrentTypeID = value;
  }

  /**
   * Gets the value of the 'RC_ExchRate' field.
   * @return The value of the 'RC_ExchRate' field.
   */
  public java.lang.Integer getRCExchRate() {
    return RC_ExchRate;
  }

  /**
   * Sets the value of the 'RC_ExchRate' field.
   * @param value the value to set.
   */
  public void setRCExchRate(java.lang.Integer value) {
    this.RC_ExchRate = value;
  }

  /**
   * Gets the value of the 'RC_AmountCDN' field.
   * @return The value of the 'RC_AmountCDN' field.
   */
  public java.lang.Integer getRCAmountCDN() {
    return RC_AmountCDN;
  }

  /**
   * Sets the value of the 'RC_AmountCDN' field.
   * @param value the value to set.
   */
  public void setRCAmountCDN(java.lang.Integer value) {
    this.RC_AmountCDN = value;
  }

  /**
   * Gets the value of the 'RC_ChequeNo' field.
   * @return The value of the 'RC_ChequeNo' field.
   */
  public java.lang.Integer getRCChequeNo() {
    return RC_ChequeNo;
  }

  /**
   * Sets the value of the 'RC_ChequeNo' field.
   * @param value the value to set.
   */
  public void setRCChequeNo(java.lang.Integer value) {
    this.RC_ChequeNo = value;
  }

  /**
   * Gets the value of the 'RC_ChequeDate' field.
   * @return The value of the 'RC_ChequeDate' field.
   */
  public java.lang.CharSequence getRCChequeDate() {
    return RC_ChequeDate;
  }

  /**
   * Sets the value of the 'RC_ChequeDate' field.
   * @param value the value to set.
   */
  public void setRCChequeDate(java.lang.CharSequence value) {
    this.RC_ChequeDate = value;
  }

  /**
   * Gets the value of the 'RE_ReasonID' field.
   * @return The value of the 'RE_ReasonID' field.
   */
  public java.lang.Integer getREReasonID() {
    return RE_ReasonID;
  }

  /**
   * Sets the value of the 'RE_ReasonID' field.
   * @param value the value to set.
   */
  public void setREReasonID(java.lang.Integer value) {
    this.RE_ReasonID = value;
  }

  /**
   * Gets the value of the 'PS_PaymentSourceID' field.
   * @return The value of the 'PS_PaymentSourceID' field.
   */
  public java.lang.Integer getPSPaymentSourceID() {
    return PS_PaymentSourceID;
  }

  /**
   * Sets the value of the 'PS_PaymentSourceID' field.
   * @param value the value to set.
   */
  public void setPSPaymentSourceID(java.lang.Integer value) {
    this.PS_PaymentSourceID = value;
  }

  /**
   * Gets the value of the 'ACT_AccountID' field.
   * @return The value of the 'ACT_AccountID' field.
   */
  public java.lang.Integer getACTAccountID() {
    return ACT_AccountID;
  }

  /**
   * Sets the value of the 'ACT_AccountID' field.
   * @param value the value to set.
   */
  public void setACTAccountID(java.lang.Integer value) {
    this.ACT_AccountID = value;
  }

  /**
   * Gets the value of the 'RE_Description' field.
   * @return The value of the 'RE_Description' field.
   */
  public java.lang.Integer getREDescription() {
    return RE_Description;
  }

  /**
   * Sets the value of the 'RE_Description' field.
   * @param value the value to set.
   */
  public void setREDescription(java.lang.Integer value) {
    this.RE_Description = value;
  }

  /**
   * Creates a new ClaimRefund RecordBuilder.
   * @return A new ClaimRefund RecordBuilder
   */
  public static gms.cims.bridge.ClaimRefund.Builder newBuilder() {
    return new gms.cims.bridge.ClaimRefund.Builder();
  }

  /**
   * Creates a new ClaimRefund RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ClaimRefund RecordBuilder
   */
  public static gms.cims.bridge.ClaimRefund.Builder newBuilder(gms.cims.bridge.ClaimRefund.Builder other) {
    return new gms.cims.bridge.ClaimRefund.Builder(other);
  }

  /**
   * Creates a new ClaimRefund RecordBuilder by copying an existing ClaimRefund instance.
   * @param other The existing instance to copy.
   * @return A new ClaimRefund RecordBuilder
   */
  public static gms.cims.bridge.ClaimRefund.Builder newBuilder(gms.cims.bridge.ClaimRefund other) {
    return new gms.cims.bridge.ClaimRefund.Builder(other);
  }

  /**
   * RecordBuilder for ClaimRefund instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClaimRefund>
    implements org.apache.avro.data.RecordBuilder<ClaimRefund> {

    private java.lang.Integer RC_ClaimRefundID;
    private java.lang.Integer CL_ClaimID;
    private java.lang.CharSequence RC_SourceName;
    private java.lang.CharSequence RC_DateReceived;
    private java.lang.Integer RC_Amount;
    private java.lang.Integer CR_CurrentTypeID;
    private java.lang.Integer RC_ExchRate;
    private java.lang.Integer RC_AmountCDN;
    private java.lang.Integer RC_ChequeNo;
    private java.lang.CharSequence RC_ChequeDate;
    private java.lang.Integer RE_ReasonID;
    private java.lang.Integer PS_PaymentSourceID;
    private java.lang.Integer ACT_AccountID;
    private java.lang.Integer RE_Description;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(gms.cims.bridge.ClaimRefund.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.RC_ClaimRefundID)) {
        this.RC_ClaimRefundID = data().deepCopy(fields()[0].schema(), other.RC_ClaimRefundID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CL_ClaimID)) {
        this.CL_ClaimID = data().deepCopy(fields()[1].schema(), other.CL_ClaimID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.RC_SourceName)) {
        this.RC_SourceName = data().deepCopy(fields()[2].schema(), other.RC_SourceName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.RC_DateReceived)) {
        this.RC_DateReceived = data().deepCopy(fields()[3].schema(), other.RC_DateReceived);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.RC_Amount)) {
        this.RC_Amount = data().deepCopy(fields()[4].schema(), other.RC_Amount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.CR_CurrentTypeID)) {
        this.CR_CurrentTypeID = data().deepCopy(fields()[5].schema(), other.CR_CurrentTypeID);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.RC_ExchRate)) {
        this.RC_ExchRate = data().deepCopy(fields()[6].schema(), other.RC_ExchRate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.RC_AmountCDN)) {
        this.RC_AmountCDN = data().deepCopy(fields()[7].schema(), other.RC_AmountCDN);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.RC_ChequeNo)) {
        this.RC_ChequeNo = data().deepCopy(fields()[8].schema(), other.RC_ChequeNo);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.RC_ChequeDate)) {
        this.RC_ChequeDate = data().deepCopy(fields()[9].schema(), other.RC_ChequeDate);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.RE_ReasonID)) {
        this.RE_ReasonID = data().deepCopy(fields()[10].schema(), other.RE_ReasonID);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.PS_PaymentSourceID)) {
        this.PS_PaymentSourceID = data().deepCopy(fields()[11].schema(), other.PS_PaymentSourceID);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.ACT_AccountID)) {
        this.ACT_AccountID = data().deepCopy(fields()[12].schema(), other.ACT_AccountID);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.RE_Description)) {
        this.RE_Description = data().deepCopy(fields()[13].schema(), other.RE_Description);
        fieldSetFlags()[13] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ClaimRefund instance
     * @param other The existing instance to copy.
     */
    private Builder(gms.cims.bridge.ClaimRefund other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.RC_ClaimRefundID)) {
        this.RC_ClaimRefundID = data().deepCopy(fields()[0].schema(), other.RC_ClaimRefundID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CL_ClaimID)) {
        this.CL_ClaimID = data().deepCopy(fields()[1].schema(), other.CL_ClaimID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.RC_SourceName)) {
        this.RC_SourceName = data().deepCopy(fields()[2].schema(), other.RC_SourceName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.RC_DateReceived)) {
        this.RC_DateReceived = data().deepCopy(fields()[3].schema(), other.RC_DateReceived);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.RC_Amount)) {
        this.RC_Amount = data().deepCopy(fields()[4].schema(), other.RC_Amount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.CR_CurrentTypeID)) {
        this.CR_CurrentTypeID = data().deepCopy(fields()[5].schema(), other.CR_CurrentTypeID);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.RC_ExchRate)) {
        this.RC_ExchRate = data().deepCopy(fields()[6].schema(), other.RC_ExchRate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.RC_AmountCDN)) {
        this.RC_AmountCDN = data().deepCopy(fields()[7].schema(), other.RC_AmountCDN);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.RC_ChequeNo)) {
        this.RC_ChequeNo = data().deepCopy(fields()[8].schema(), other.RC_ChequeNo);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.RC_ChequeDate)) {
        this.RC_ChequeDate = data().deepCopy(fields()[9].schema(), other.RC_ChequeDate);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.RE_ReasonID)) {
        this.RE_ReasonID = data().deepCopy(fields()[10].schema(), other.RE_ReasonID);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.PS_PaymentSourceID)) {
        this.PS_PaymentSourceID = data().deepCopy(fields()[11].schema(), other.PS_PaymentSourceID);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.ACT_AccountID)) {
        this.ACT_AccountID = data().deepCopy(fields()[12].schema(), other.ACT_AccountID);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.RE_Description)) {
        this.RE_Description = data().deepCopy(fields()[13].schema(), other.RE_Description);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'RC_ClaimRefundID' field.
      * @return The value.
      */
    public java.lang.Integer getRCClaimRefundID() {
      return RC_ClaimRefundID;
    }

    /**
      * Sets the value of the 'RC_ClaimRefundID' field.
      * @param value The value of 'RC_ClaimRefundID'.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder setRCClaimRefundID(java.lang.Integer value) {
      validate(fields()[0], value);
      this.RC_ClaimRefundID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'RC_ClaimRefundID' field has been set.
      * @return True if the 'RC_ClaimRefundID' field has been set, false otherwise.
      */
    public boolean hasRCClaimRefundID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'RC_ClaimRefundID' field.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder clearRCClaimRefundID() {
      RC_ClaimRefundID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'CL_ClaimID' field.
      * @return The value.
      */
    public java.lang.Integer getCLClaimID() {
      return CL_ClaimID;
    }

    /**
      * Sets the value of the 'CL_ClaimID' field.
      * @param value The value of 'CL_ClaimID'.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder setCLClaimID(java.lang.Integer value) {
      validate(fields()[1], value);
      this.CL_ClaimID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'CL_ClaimID' field has been set.
      * @return True if the 'CL_ClaimID' field has been set, false otherwise.
      */
    public boolean hasCLClaimID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'CL_ClaimID' field.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder clearCLClaimID() {
      CL_ClaimID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'RC_SourceName' field.
      * @return The value.
      */
    public java.lang.CharSequence getRCSourceName() {
      return RC_SourceName;
    }

    /**
      * Sets the value of the 'RC_SourceName' field.
      * @param value The value of 'RC_SourceName'.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder setRCSourceName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.RC_SourceName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'RC_SourceName' field has been set.
      * @return True if the 'RC_SourceName' field has been set, false otherwise.
      */
    public boolean hasRCSourceName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'RC_SourceName' field.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder clearRCSourceName() {
      RC_SourceName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'RC_DateReceived' field.
      * @return The value.
      */
    public java.lang.CharSequence getRCDateReceived() {
      return RC_DateReceived;
    }

    /**
      * Sets the value of the 'RC_DateReceived' field.
      * @param value The value of 'RC_DateReceived'.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder setRCDateReceived(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.RC_DateReceived = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'RC_DateReceived' field has been set.
      * @return True if the 'RC_DateReceived' field has been set, false otherwise.
      */
    public boolean hasRCDateReceived() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'RC_DateReceived' field.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder clearRCDateReceived() {
      RC_DateReceived = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'RC_Amount' field.
      * @return The value.
      */
    public java.lang.Integer getRCAmount() {
      return RC_Amount;
    }

    /**
      * Sets the value of the 'RC_Amount' field.
      * @param value The value of 'RC_Amount'.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder setRCAmount(java.lang.Integer value) {
      validate(fields()[4], value);
      this.RC_Amount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'RC_Amount' field has been set.
      * @return True if the 'RC_Amount' field has been set, false otherwise.
      */
    public boolean hasRCAmount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'RC_Amount' field.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder clearRCAmount() {
      RC_Amount = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'CR_CurrentTypeID' field.
      * @return The value.
      */
    public java.lang.Integer getCRCurrentTypeID() {
      return CR_CurrentTypeID;
    }

    /**
      * Sets the value of the 'CR_CurrentTypeID' field.
      * @param value The value of 'CR_CurrentTypeID'.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder setCRCurrentTypeID(java.lang.Integer value) {
      validate(fields()[5], value);
      this.CR_CurrentTypeID = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'CR_CurrentTypeID' field has been set.
      * @return True if the 'CR_CurrentTypeID' field has been set, false otherwise.
      */
    public boolean hasCRCurrentTypeID() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'CR_CurrentTypeID' field.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder clearCRCurrentTypeID() {
      CR_CurrentTypeID = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'RC_ExchRate' field.
      * @return The value.
      */
    public java.lang.Integer getRCExchRate() {
      return RC_ExchRate;
    }

    /**
      * Sets the value of the 'RC_ExchRate' field.
      * @param value The value of 'RC_ExchRate'.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder setRCExchRate(java.lang.Integer value) {
      validate(fields()[6], value);
      this.RC_ExchRate = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'RC_ExchRate' field has been set.
      * @return True if the 'RC_ExchRate' field has been set, false otherwise.
      */
    public boolean hasRCExchRate() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'RC_ExchRate' field.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder clearRCExchRate() {
      RC_ExchRate = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'RC_AmountCDN' field.
      * @return The value.
      */
    public java.lang.Integer getRCAmountCDN() {
      return RC_AmountCDN;
    }

    /**
      * Sets the value of the 'RC_AmountCDN' field.
      * @param value The value of 'RC_AmountCDN'.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder setRCAmountCDN(java.lang.Integer value) {
      validate(fields()[7], value);
      this.RC_AmountCDN = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'RC_AmountCDN' field has been set.
      * @return True if the 'RC_AmountCDN' field has been set, false otherwise.
      */
    public boolean hasRCAmountCDN() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'RC_AmountCDN' field.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder clearRCAmountCDN() {
      RC_AmountCDN = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'RC_ChequeNo' field.
      * @return The value.
      */
    public java.lang.Integer getRCChequeNo() {
      return RC_ChequeNo;
    }

    /**
      * Sets the value of the 'RC_ChequeNo' field.
      * @param value The value of 'RC_ChequeNo'.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder setRCChequeNo(java.lang.Integer value) {
      validate(fields()[8], value);
      this.RC_ChequeNo = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'RC_ChequeNo' field has been set.
      * @return True if the 'RC_ChequeNo' field has been set, false otherwise.
      */
    public boolean hasRCChequeNo() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'RC_ChequeNo' field.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder clearRCChequeNo() {
      RC_ChequeNo = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'RC_ChequeDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getRCChequeDate() {
      return RC_ChequeDate;
    }

    /**
      * Sets the value of the 'RC_ChequeDate' field.
      * @param value The value of 'RC_ChequeDate'.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder setRCChequeDate(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.RC_ChequeDate = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'RC_ChequeDate' field has been set.
      * @return True if the 'RC_ChequeDate' field has been set, false otherwise.
      */
    public boolean hasRCChequeDate() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'RC_ChequeDate' field.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder clearRCChequeDate() {
      RC_ChequeDate = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'RE_ReasonID' field.
      * @return The value.
      */
    public java.lang.Integer getREReasonID() {
      return RE_ReasonID;
    }

    /**
      * Sets the value of the 'RE_ReasonID' field.
      * @param value The value of 'RE_ReasonID'.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder setREReasonID(java.lang.Integer value) {
      validate(fields()[10], value);
      this.RE_ReasonID = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'RE_ReasonID' field has been set.
      * @return True if the 'RE_ReasonID' field has been set, false otherwise.
      */
    public boolean hasREReasonID() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'RE_ReasonID' field.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder clearREReasonID() {
      RE_ReasonID = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'PS_PaymentSourceID' field.
      * @return The value.
      */
    public java.lang.Integer getPSPaymentSourceID() {
      return PS_PaymentSourceID;
    }

    /**
      * Sets the value of the 'PS_PaymentSourceID' field.
      * @param value The value of 'PS_PaymentSourceID'.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder setPSPaymentSourceID(java.lang.Integer value) {
      validate(fields()[11], value);
      this.PS_PaymentSourceID = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'PS_PaymentSourceID' field has been set.
      * @return True if the 'PS_PaymentSourceID' field has been set, false otherwise.
      */
    public boolean hasPSPaymentSourceID() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'PS_PaymentSourceID' field.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder clearPSPaymentSourceID() {
      PS_PaymentSourceID = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'ACT_AccountID' field.
      * @return The value.
      */
    public java.lang.Integer getACTAccountID() {
      return ACT_AccountID;
    }

    /**
      * Sets the value of the 'ACT_AccountID' field.
      * @param value The value of 'ACT_AccountID'.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder setACTAccountID(java.lang.Integer value) {
      validate(fields()[12], value);
      this.ACT_AccountID = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'ACT_AccountID' field has been set.
      * @return True if the 'ACT_AccountID' field has been set, false otherwise.
      */
    public boolean hasACTAccountID() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'ACT_AccountID' field.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder clearACTAccountID() {
      ACT_AccountID = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'RE_Description' field.
      * @return The value.
      */
    public java.lang.Integer getREDescription() {
      return RE_Description;
    }

    /**
      * Sets the value of the 'RE_Description' field.
      * @param value The value of 'RE_Description'.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder setREDescription(java.lang.Integer value) {
      validate(fields()[13], value);
      this.RE_Description = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'RE_Description' field has been set.
      * @return True if the 'RE_Description' field has been set, false otherwise.
      */
    public boolean hasREDescription() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'RE_Description' field.
      * @return This builder.
      */
    public gms.cims.bridge.ClaimRefund.Builder clearREDescription() {
      RE_Description = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ClaimRefund build() {
      try {
        ClaimRefund record = new ClaimRefund();
        record.RC_ClaimRefundID = fieldSetFlags()[0] ? this.RC_ClaimRefundID : (java.lang.Integer) defaultValue(fields()[0]);
        record.CL_ClaimID = fieldSetFlags()[1] ? this.CL_ClaimID : (java.lang.Integer) defaultValue(fields()[1]);
        record.RC_SourceName = fieldSetFlags()[2] ? this.RC_SourceName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.RC_DateReceived = fieldSetFlags()[3] ? this.RC_DateReceived : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.RC_Amount = fieldSetFlags()[4] ? this.RC_Amount : (java.lang.Integer) defaultValue(fields()[4]);
        record.CR_CurrentTypeID = fieldSetFlags()[5] ? this.CR_CurrentTypeID : (java.lang.Integer) defaultValue(fields()[5]);
        record.RC_ExchRate = fieldSetFlags()[6] ? this.RC_ExchRate : (java.lang.Integer) defaultValue(fields()[6]);
        record.RC_AmountCDN = fieldSetFlags()[7] ? this.RC_AmountCDN : (java.lang.Integer) defaultValue(fields()[7]);
        record.RC_ChequeNo = fieldSetFlags()[8] ? this.RC_ChequeNo : (java.lang.Integer) defaultValue(fields()[8]);
        record.RC_ChequeDate = fieldSetFlags()[9] ? this.RC_ChequeDate : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.RE_ReasonID = fieldSetFlags()[10] ? this.RE_ReasonID : (java.lang.Integer) defaultValue(fields()[10]);
        record.PS_PaymentSourceID = fieldSetFlags()[11] ? this.PS_PaymentSourceID : (java.lang.Integer) defaultValue(fields()[11]);
        record.ACT_AccountID = fieldSetFlags()[12] ? this.ACT_AccountID : (java.lang.Integer) defaultValue(fields()[12]);
        record.RE_Description = fieldSetFlags()[13] ? this.RE_Description : (java.lang.Integer) defaultValue(fields()[13]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ClaimRefund>
    WRITER$ = (org.apache.avro.io.DatumWriter<ClaimRefund>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ClaimRefund>
    READER$ = (org.apache.avro.io.DatumReader<ClaimRefund>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
